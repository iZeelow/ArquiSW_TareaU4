import logging

from pymongo import MongoClient
from bson.errors import InvalidId
from bson.objectid import ObjectId
from fastapi import FastAPI
from fastapi import HTTPException
from pydantic import BaseModel

from .events import Emit

app = FastAPI()
mongodb_client = MongoClient("tarea_U4_service_users_mongodb", 27017)

emit_events = Emit()

logging.basicConfig( level = logging.INFO, 
                    format="%(asctime)s:%(levelname)s:%(name)s:%(message)s")

class User(BaseModel):
    id: None = None
    name: str
    username: str
    password: str
    
    def __init__(self, **kargs):
        if "_id" in kargs:
            kargs["id"] = str(kargs["id"])
        BaseModel.__init__(self, **kargs)

@app.get("/")
async def root():
    logging.info("Hello World (end=point)")
    return {"Hello": "World"}

@app.get("/users", response_model=list[User], summary = "Get all Users", response_description = "A list of all Users")

def users_all():
    """
    Get all users
    """
    filters = {}
    return [User(**user) for user in mongodb_client.service_users.users.find(filters)]

@app.get("/users/{user_id}", summary = "Get an User", response_description = "The user found")
def users_get(user_id: str):
    """
    Get user by id
    - **user_id**: the user's id to delete
    """
    try:
        user_id = ObjectId(user_id)
        return User(
            **mongodb_client.service_users.users.find_one({"_id": user_id})
        )
    except (InvalidId, TypeError):
        raise HTTPException(status_code = 404, detail = "User not found")
    
@app.get("users/{user_id}")
def users_update(user_id: str, user: dict):
    """
    Update an User's username
    - **user_id**: the user's id to delete
    """
    try:
        user_id: ObjectId(user_id)
        mongodb_client.service_users.update_one(
            {"__id": user_id}, {"$set", user}
        )
        return User(
            **mongodb_client.users.users.find_one({"_id": user_id})
        )
    except (InvalidId, TypeError):
        raise HTTPException(status_code = 405, detail= "Can't update user")
    
@app.delete("/users/{user_id}", summary = "Delete an User", response_description = "The deleted User")
def users_delete(user_id: str):
    """
    Delete an User by their id:
    - **user_id**: the user's id to delete
    """
    try:
        user_id = ObjectId(user_id)
        user = User(
            **mongodb_client.users.users.find_one({"_id"})
        )
    except (InvalidId, TypeError):
        raise HTTPException(status_code = 404, detail = "User not found")
    
    mongodb_client.users.users.delete_one(
        {"_id": ObjectId(user_id)}
    )
    
    return user

@app.post("/users", summary = "Create an User", response_description = "The created User")
def users_create(user: User):
    """
    Create an User with all their information:
    - **id**: the id is generated by the database
    - **name**: the User's name
    - **username**: The User's username or ign (unique maybe)
    - **password**: The User's password
    """
    inserted_id = mongodb_client.service_users.users.insert_one(
        user.dict()
    ).inserted_id

    new_user = User(
        **mongodb_client.service_users.users.find_one(
            {"_id": ObjectId(inserted_id)}
        )
    )

    #emit_events.send(inserted_id, "create", new_player.dict())

    logging.info(f"New player created: {new_user}")

    return new_user